{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This CloudFormation template will create a Lambda function, Iam policy, group and CloundWatch event rules to create a setup which will automatically tag an EC2 instance and its associated resources without granting ec2:createTags permission to users. Access to manage Amazon EC2 instances can be controlled using tags. You can do this by writing an Identity and Access Management (IAM) policy that grants users permissions to manage EC2 instances that have a specific tag. However, if you also give users permissions to create or delete tags, users can manipulate the values of the tags to gain access and manage additional instances. It will use a combination of an Amazon CloudWatch Events rule and AWS Lambda to tag newly created instances. With this solution, your users do not need to have permissions to create tags because the Lambda function will have the permissions to tag the instances. The solution can be automatically deployed in the region of your choice with AWS CloudFormation.",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Prerequisites"
                    },
                    "Parameters": [
                        "IsCloudTrailEnabled"
                    ]
                }
            ],
            "ParameterLabels": {
                "IsCloudTrailEnabled": {
                    "default": "Is CloudTrail already enabled in this region? CloudTrail is a requirement for Cloudwatch Events. If not enabled, please enable CloudTrail before proceeding."
                }
            }
        }
    },
    "Parameters": {
        "IsCloudTrailEnabled": {
            "Description": "Specify if CloudTrail is enabled in the current region",
            "Type": "String",
            "Default": "Yes",
            "AllowedValues": [
                "Yes",
                "No"
            ]
        }
    },
    "Conditions": {
        "CreateResources": {
            "Fn::Equals": [
                {
                    "Ref": "IsCloudTrailEnabled"
                },
                "Yes"
            ]
        }
    },
    "Resources": {
        "PermissionForEventsToInvokeLambdav01": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Ref": "LambdaFucntionForAutoTagv01"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "CloudWatchEC2EventRulev01",
                        "Arn"
                    ]
                }
            }
        },
        "LambdaFucntionForAutoTagv01": {
            "Type": "AWS::Lambda::Function",
            "Condition": "CreateResources",
            "Properties": {
                "FunctionName": "Lambda_FucntionForAutoTagv01",
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "from __future__ import print_function",
                                "import json",
                                "import boto3",
                                "import logging",
                                "import time",
                                "import datetime",
                                "",
                                "logger = logging.getLogger()",
                                "logger.setLevel(logging.INFO)",
                                "",
                                "def lambda_handler(event, context):",
                                "    #logger.info('Event: ' + str(event))",
                                "    #print('Received event: ' + json.dumps(event, indent=2))",
                                "",
                                "    ids = []",
                                "",
                                "    try:",
                                "        region = event['region']",
                                "        detail = event['detail']",
                                "        eventname = detail['eventName']",
                                "        arn = detail['userIdentity']['arn']",
                                "        principal = detail['userIdentity']['principalId']",
                                "        userType = detail['userIdentity']['type']",
                                "",
                                "        if userType == 'IAMUser':",
                                "            user = detail['userIdentity']['userName']",
                                "",
                                "        else:",
                                "            user = principal.split(':')[1]",
                                "",
                                "",
                                "        logger.info('principalId: ' + str(principal))",
                                "        logger.info('region: ' + str(region))",
                                "        logger.info('eventName: ' + str(eventname))",
                                "        logger.info('detail: ' + str(detail))",
                                "",
                                "        if not detail['responseElements']:",
                                "            logger.warning('Not responseElements found')",
                                "            if detail['errorCode']:",
                                "                logger.error('errorCode: ' + detail['errorCode'])",
                                "            if detail['errorMessage']:",
                                "                logger.error('errorMessage: ' + detail['errorMessage'])",
                                "            return False",
                                "",
                                "        ec2 = boto3.resource('ec2')",
                                "",
                                "        if eventname == 'CreateVolume':",
                                "            ids.append(detail['responseElements']['volumeId'])",
                                "            logger.info(ids)",
                                "",
                                "        elif eventname == 'RunInstances':",
                                "            items = detail['responseElements']['instancesSet']['items']",
                                "            for item in items:",
                                "                ids.append(item['instanceId'])",
                                "            logger.info(ids)",
                                "            logger.info('number of instances: ' + str(len(ids)))",
                                "",
                                "            base = ec2.instances.filter(InstanceIds=ids)",
                                "",
                                "            #loop through the instances",
                                "            for instance in base:",
                                "                for vol in instance.volumes.all():",
                                "                    ids.append(vol.id)",
                                "                for eni in instance.network_interfaces:",
                                "                    ids.append(eni.id)",
                                "",
                                "        elif eventname == 'CreateImage':",
                                "            ids.append(detail['responseElements']['imageId'])",
                                "            logger.info(ids)",
                                "",
                                "        elif eventname == 'CreateSnapshot':",
                                "            ids.append(detail['responseElements']['snapshotId'])",
                                "            logger.info(ids)",
                                "        else:",
                                "            logger.warning('Not supported action')",
                                "",
                                "        if ids:",
                                "            for resourceid in ids:",
                                "                print('Tagging resource ' + resourceid)",
                                "            ec2.create_tags(Resources=ids, Tags=[{'Key': 'Owner', 'Value': user}, {'Key': 'PrincipalId', 'Value': principal}])",
                                "",
                                "        logger.info(' Remaining time (ms): ' + str(context.get_remaining_time_in_millis()) + '\\n')",
                                "        return True",
                                "    except Exception as e:",
                                "        logger.error('Something went wrong: ' + str(e))",
                                "        return False"
                            ]
                        ]
                    }
                },
                "Description": "This function tags EC2 Resources in response to Cloudwatch Events.",
                "Handler": "index.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "RoleForLambdaToAutoTagv01",
                        "Arn"
                    ]
                },
                "Runtime": "python2.7",
                "Timeout": "60"
            }
        },
        "CloudWatchEC2EventRulev01": {
            "Type": "AWS::Events::Rule",
            "Condition": "CreateResources",
            "Properties": {
                "Description": "Trigger a Lambda function anytime a new EC2 resource is created (EC2 instance, EBS volume, EBS Snapshot or AMI)",
                "EventPattern": {
                    "detail-type": [
                        "AWS API Call via CloudTrail"
                    ],
                    "detail": {
                        "eventSource": [
                            "ec2.amazonaws.com"
                        ],
                        "eventName": [
                            "CreateVolume",
                            "RunInstances",
                            "CreateImage",
                            "CreateSnapshot"
                        ]
                    }
                },
                "Name": "CloudWatch_EC2_Event_Rule_v01",
                "State": "ENABLED",
                "Targets": [
                    {
                        "Arn": { "Fn::GetAtt": ["LambdaFucntionForAutoTagv01", "Arn"] },
                        "Id": "LambdaFucntionForAutoTagv01"
                    }
                ]
            }
        },
        "RoleForLambdaToAutoTagv01": {
            "Type": "AWS::IAM::Role",
            "Condition": "CreateResources",
            "Properties": {
                "RoleName": "Role_For_Lambda_To_Auto_Tag_v01",
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "InLine_Policy_For_Lambda_To_Create_Tags_v01",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Sid": "Stmt1458923097000",
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloudtrail:LookupEvents"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                },
                                {
                                    "Sid": "Stmt1458923121000",
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:CreateTags",
                                        "ec2:Describe*",
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "IAMGroupToManageEC2Instancesv01": {
            "Type": "AWS::IAM::Group",
            "Condition": "CreateResources",
            "Properties": {
                "GroupName": "IAM_Group_To_Manage_EC2_Instances_v01",
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess"
                ]
            }
        },
        "IAMPolicyForTagBasedEC2Restrictionsv01": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Condition": "CreateResources",
            "Properties": {
                "ManagedPolicyName": "IAM_Policy_For_Tag_Based_EC2_Restrictions_v01",
                "Description": "This policy allows Start/Stop/Reboot/Terminate for EC2 instances where the tag 'Owner' doesn't match the current requester's user ID.",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "AllowEveryEC2ActionOnAllResourse",
                            "Effect": "Allow",
                            "Action": [
                                "ec2:*"
                            ],
                            "Resource": [
                                "*"
                            ]
                        },
                        {
                            "Sid": "RestrictRebootStartStopTerminateToInstanceOwner",
                            "Effect": "Deny",
                            "Action": [
                                "ec2:RebootInstances",
                                "ec2:TerminateInstances",
                                "ec2:StartInstances",
                                "ec2:StopInstances"
                            ],
                            "Resource": "arn:aws:ec2:*:*:instance/*",
                            "Condition": {
                                "StringNotEquals": {
                                    "ec2:ResourceTag/PrincipalId": "${aws:userid}"
                                }
                            }
                        },
                        {
                            "Sid": "RestrictUsersFromCreatingDeletingTags",
                            "Effect": "Deny",
                            "Action": [
                                "ec2:DeleteTags",
                                "ec2:CreateTags"
                            ],
                            "Resource": "arn:aws:ec2:*:*:instance/*"
                        }
                    ]
                },
                "Groups": [
                    {
                        "Ref": "IAMGroupToManageEC2Instancesv01"
                    }
                ]
            }
        }
    },
    "Outputs": {}
}
